# include the application.conf at the top
include required(classpath("application"))

call-caching {
  enabled = true
  invalidate-bad-cache-results = true
}

docker {
    hash-lookup {
        enabled = false
    }
}

database {
  profile = "slick.jdbc.HsqldbProfile$"
  db {
    driver = "org.hsqldb.jdbcDriver"
    url = """
    jdbc:hsqldb:file:cromwell-executions/cromwell-db/cromwell-db;
    shutdown=false;
    hsqldb.default_table_type=cached;hsqldb.tx=mvcc;
    hsqldb.result_max_memory_rows=10000;
    hsqldb.large_data=true;
    hsqldb.applog=1;
    hsqldb.lob_compressed=true;
    hsqldb.script_format=3
    """
    connectionTimeout = 120000
    numThreads = 1
   }
}

backend {
  default = "Slurm"
  providers {
    Slurm {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory" 
      config {
        concurrent-job-limit = 50
        script-epilogue = ""
        runtime-attributes = """
        Int maxRetries = 1
        Int time = 600
        Int cpu = 2
        Float memory_gb = 20.0
        String? disks = "local-disk 20 SSD"
        String? docker
        """

        submit = """
            sbatch \
              --partition=norm \
              -J ${job_name} \
              -D ${cwd} \
              -o ${out} \
              -e ${err} \
              -t ${time} \
              ${"-c " + cpu} \
              --mem=$(echo $(printf %.0f "${memory_gb}")"g") \
              --gres=lscratch:$(echo "${disks}" | cut -f 2 -d " ") \
              --wrap "/bin/bash ${script}"
        """

        submit-docker = """
            # Ensure singularity is loaded if it's installed as a module
            module load singularity

            # Build the Docker image into a singularity image
            DOCKER_CONTAINER_DIR="/data/$USER/containers"
            if [ ! -d $DOCKER_CONTAINER_DIR ]; then
                mkdir -p $DOCKER_CONTAINER_DIR
                chmod 2770 $DOCKER_CONTAINER_DIR
            fi
            DOCKER_NAME=$(sed -e 's/[^A-Za-z0-9._-]/_/g' <<< ${docker})
            IMAGE=$DOCKER_CONTAINER_DIR/$DOCKER_NAME.sif
            if [ ! -f $IMAGE ]; then
                singularity pull $IMAGE docker://${docker}
            fi
            
            # Setup script command string that will be passed into
            script_commands="module load singularity; time singularity exec --bind ${cwd}:${docker_cwd} $IMAGE ${job_shell} ${script}"
            if [ "${docker}" == "ubuntu@sha256:2695d3e10e69cc500a16eae6d6629c803c43ab075fa5ce60813a0fc49c47e859" ]; then
                new_cwd=$(echo "${cwd}" | sed 's/\(\/cromwell-executions\).*/\1/g')
                new_script=$(echo "${script}" | sed 's/.*\(\/cromwell-executions\)/\1/g')
                script_commands="module load singularity; time singularity exec -H $new_cwd:/cromwell-executions --pwd ${docker_cwd} $IMAGE ${job_shell} $new_script"
            fi
            
            # Submit the script to SLURM
            sbatch \
              --partition=norm \
              -J ${job_name} \
              -D ${cwd} \
              -o ${cwd}/execution/stdout \
              -e ${cwd}/execution/stderr \
              -t ${time} \
              ${"-c " + cpu} \
              --mem=$(echo $(printf %.0f "${memory_gb}")"g") \
              --gres=lscratch:$(echo "${disks}" | cut -f 2 -d " ") \
              --wrap "$script_commands"
        """
        kill = "scancel ${job_id}"
        check-alive = "squeue -j ${job_id}"
        job-id-regex = "(\\d+).*"
      }
    }
  }
}


