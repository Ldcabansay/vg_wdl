# include the application.conf at the top
include required(classpath("application"))

system.io {
  number-of-attempts = 5
}

backend {
  default = "Slurm"
  providers {
    Slurm {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory" 
      config {
        concurrent-job-limit = 50
        script-epilogue = ""
        #call-caching {
        #  enabled = true
        #  invalidate-bad-cache-results = true
        #}
        runtime-attributes = """
        Int maxRetries = 5
        Int time = 600
        Int cpu = 2
        Float memory_gb = 20.0
        String? disks = "local-disk 20 SSD"
        String? docker
        """

        submit = """
            sbatch \
              --partition=norm \
              -J ${job_name} \
              -D ${cwd} \
              -o ${out} \
              -e ${err} \
              -t ${time} \
              ${"-c " + cpu} \
              --mem=$(echo $(printf %.0f "${memory_gb}")"g") \
              --gres=lscratch:$(echo "${disks}" | cut -f 2 -d " ") \
              --wrap "/bin/bash ${script}"
        """

        submit-docker = """
            if [ "${docker}" = "null" ]; then
                new_cwd=$(echo "${cwd}" | sed 's/\(\/cromwell-executions\).*/\1/g')
                new_script=$(echo "${script}" | sed 's/.*\(\/cromwell-executions\)/\1/g')
                # Ensure singularity is loaded if it's installed as a module
                module load singularity

                # Build the Docker image into a singularity image
                DOCKER_CONTAINER_DIR="/data/$USER/containers"
                if [ ! -d $DOCKER_CONTAINER_DIR ]; then
                    mkdir -p $DOCKER_CONTAINER_DIR
                    chmod 2770 $DOCKER_CONTAINER_DIR
                fi
                DOCKER_NAME=$(sed -e 's/[^A-Za-z0-9._-]/_/g' <<< 'ubuntu:latest')
                IMAGE=$DOCKER_CONTAINER_DIR/$DOCKER_NAME.sif
                if [ ! -f $IMAGE ]; then
                    singularity pull $IMAGE docker://ubuntu:latest
                fi
                sbatch \
                  --partition=norm \
                  -J ${job_name} \
                  -D ${cwd} \
                  -o ${cwd}/execution/stdout \
                  -e ${cwd}/execution/stderr \
                  -t ${time} \
                  ${"-c " + cpu} \
                  --mem=$(echo $(printf %.0f "${memory_gb}")"g") \
                  --gres=lscratch:$(echo "${disks}" | cut -f 2 -d " ") \
                  --wrap "module load singularity; mkdir -p /lscratch/\$SLURM_JOB_ID/singularity_cache; export SINGULARITY_CACHEDIR=/lscratch/\$SLURM_JOB_ID/singularity_cache/; time singularity exec -H $new_cwd:/cromwell-executions --pwd ${docker_cwd} $IMAGE ${job_shell} $new_script"
            else
                # Ensure singularity is loaded if it's installed as a module
                module load singularity

                # Build the Docker image into a singularity image
                DOCKER_CONTAINER_DIR="/data/$USER/containers"
                if [ ! -d $DOCKER_CONTAINER_DIR ]; then
                    mkdir -p $DOCKER_CONTAINER_DIR
                    chmod 2770 $DOCKER_CONTAINER_DIR
                fi
                DOCKER_NAME=$(sed -e 's/[^A-Za-z0-9._-]/_/g' <<< ${docker})
                IMAGE=$DOCKER_CONTAINER_DIR/$DOCKER_NAME.sif
                if [ ! -f $IMAGE ]; then
                    singularity pull $IMAGE docker://${docker}
                fi
                # Submit the script to SLURM
                sbatch \
                  --partition=norm \
                  -J ${job_name} \
                  -D ${cwd} \
                  -o ${cwd}/execution/stdout \
                  -e ${cwd}/execution/stderr \
                  -t ${time} \
                  ${"-c " + cpu} \
                  --mem=$(echo $(printf %.0f "${memory_gb}")"g") \
                  --gres=lscratch:$(echo "${disks}" | cut -f 2 -d " ") \
                  --wrap "module load singularity; mkdir -p /lscratch/\$SLURM_JOB_ID/singularity_cache; export SINGULARITY_CACHEDIR=/lscratch/\$SLURM_JOB_ID/singularity_cache/; time singularity exec --bind ${cwd}:${docker_cwd} $IMAGE ${job_shell} ${script}"
            fi
        """
        kill = "scancel ${job_id}"
        check-alive = "squeue -j ${job_id}"
        job-id-regex = "(\\d+).*"
      }
    }
  }
}


